version: '3.8'

services:

  ############# Generals #############
  postgres:
    image: postgres:13.0-alpine
    container_name: postgres
    volumes:
      - ./.data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - backend
    env_file:
      - ./src/.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2.6
    container_name: redis
    command:
      - redis-server
    ports:
      - 6379:6379
    networks:
      - backend
    env_file:
      - ./src/.env

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - 80:80
    depends_on:
      - flask-auth
    networks:
      - backend

  flask-auth:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask-auth
    expose:
      - 5000
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./src/.env
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    ports:
      - '6831:6831'
      - '16686:16686'
      - '14268:14268'
      - '5778:5778'
      - '6832:6832'
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - nginx


volumes:
  postgres_volume:

networks:
  backend:
    driver: bridge